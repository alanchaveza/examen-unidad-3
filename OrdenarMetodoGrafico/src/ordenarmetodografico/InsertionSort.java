/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ordenarmetodografico;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;

/**
 *
 * @author carlos
 */
public class InsertionSort extends javax.swing.JFrame {

    /**
     * Creates new form InsertionSort
     */
    public InsertionSort() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        Start = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        NumerosAleatorios = new java.awt.Button();
        SelectionSort = new java.awt.Button();
        button2 = new java.awt.Button();
        QuickSort = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        canvas1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        canvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvas1MouseClicked(evt);
            }
        });

        Start.setLabel("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        NumerosAleatorios.setLabel("Numeros Aleatorios");
        NumerosAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumerosAleatoriosActionPerformed(evt);
            }
        });

        SelectionSort.setLabel("SelectionSort");
        SelectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionSortActionPerformed(evt);
            }
        });

        button2.setActionCommand("InsertionSort");
        button2.setLabel("InsertionSort");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        QuickSort.setLabel("QuickSort");
        QuickSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuickSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 1170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NumerosAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(QuickSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(444, 444, 444))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NumerosAleatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1))
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QuickSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int Matriz[]= new int[20];
//x 1770
//y 498
public int PuntoI=0;
public static int[] insertionSort(int[] arr){
         Graphics grMiDibu=InsertionSort.canvas1.getGraphics(); 
        int temp;
        for (int i = 1; i < arr.length; i++) {
            for(int j = i ; j > 0 ; j--){
                if(arr[j] < arr[j-1]){
                    temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                    
                    
                    grMiDibu.clearRect(0, 0, 1200, 500);
                        System.out.println(arr[j-1]);
                        System.out.println(temp);
                
         int PuntoI=50;
        for (int n = 0;  n< arr.length; n++) {
            System.out.println("numero"+arr[n]);
            if (arr[n]==arr[j-1]){
                grMiDibu.setColor(Color.yellow);
                }
                if (arr[n]==arr[i]){
                grMiDibu.setColor(Color.red);
                }
            for (int k = 0; k <10; k++) {
                  
            grMiDibu.drawLine(PuntoI, 450, PuntoI, arr[n]);
            grMiDibu.fillOval(PuntoI-3, arr[n]-9, 10, 10);
            PuntoI=PuntoI+1;
            try {
 Thread.sleep(1); //detiene el programa medio segundo, cantidad a su criterio.
} catch (InterruptedException ex) {
 ex.printStackTrace();
}
            }
            grMiDibu.setColor(Color.black);
            PuntoI=PuntoI+20;
            }
        PuntoI=0;
                    
                }
                
            }
        }
        return arr;
    }
public static int[] selectionSort(int[] arr){
    
    Graphics grMiDibu=InsertionSort.canvas1.getGraphics(); 
    
	    for (int i = 0; i < arr.length - 1; i++)
	    {
	        int index = i;
	        for (int j = i + 1; j < arr.length; j++)
	            if (arr[j] > arr[index]) {
                        System.out.println("comparando "+arr[j] + "con"+arr[index]);
	                index = j;
	        int smallerNumber = arr[index];  
	        arr[index] = arr[i];
	        arr[i] = smallerNumber;
                
                grMiDibu.clearRect(0, 0, 1200, 500);
                        System.out.println(arr[index]);
                        System.out.println(smallerNumber);
                
         int PuntoI=50;
        for (int n = 0;  n< arr.length; n++) {
            System.out.println("numero"+arr[n]);
            if (arr[n]==arr[index]){
                grMiDibu.setColor(Color.yellow);
                }
                if (arr[n]==arr[i]){
                grMiDibu.setColor(Color.red);
                }
            for (int k = 0; k <10; k++) {
                  
            grMiDibu.drawLine(PuntoI, 450, PuntoI, arr[n]);
            grMiDibu.fillOval(PuntoI-3, arr[n]-9, 10, 10);
            PuntoI=PuntoI+1;
            try {
 Thread.sleep(1); //detiene el programa medio segundo, cantidad a su criterio.
} catch (InterruptedException ex) {
 ex.printStackTrace();
}
            }
            grMiDibu.setColor(Color.black);
            PuntoI=PuntoI+20;
            }
        PuntoI=0;
                    }
                
                
	    }
	    return arr;
	}
static void DesordenarArreglo(int [] iArre) {
    int PuntoI=50;
        for (int i = 0;  i< iArre.length; i++) {
            iArre[i]= (int)(Math.random()*300);
             Graphics grMiDibu=InsertionSort.canvas1.getGraphics();
            //                x-->  DisY  ancho  
            for (int j = 0; j <10; j++) {
            grMiDibu.drawLine(PuntoI, 450, PuntoI, iArre[i]);
            grMiDibu.fillOval(PuntoI-3, iArre[i]-9, 10, 10);
            PuntoI=PuntoI+1;
            try {
 Thread.sleep(10); //detiene el programa medio segundo, cantidad a su criterio.
} catch (InterruptedException ex) {
 ex.printStackTrace();
}
            }
            PuntoI=PuntoI+20;
            }
        PuntoI=0;
}
    private void NumerosAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumerosAleatoriosActionPerformed
        
        Graphics grMiDibu=InsertionSort.canvas1.getGraphics();
        grMiDibu.clearRect(0, 0, 1200, 500);
        grMiDibu.drawLine(40, 450, 1200,450);
        grMiDibu.drawLine(40, 450, 40,20);
        PuntoI=0;
        DesordenarArreglo(Matriz);
        
        
    }//GEN-LAST:event_NumerosAleatoriosActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
       

    }//GEN-LAST:event_StartActionPerformed

    private void canvas1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MouseClicked
        Point pMiclick = evt.getPoint();
        System.out.println(pMiclick);
    }//GEN-LAST:event_canvas1MouseClicked

    private void SelectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionSortActionPerformed
        selectionSort(Matriz);
        selectionSort(Matriz);
        selectionSort(Matriz);
        selectionSort(Matriz);        
        
        
        
        
    }//GEN-LAST:event_SelectionSortActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        insertionSort(Matriz);
        
    }//GEN-LAST:event_button2ActionPerformed

    private void QuickSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuickSortActionPerformed
        
        
        
    }//GEN-LAST:event_QuickSortActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        
        
        
    
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertionSort().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button NumerosAleatorios;
    private java.awt.Button QuickSort;
    private java.awt.Button SelectionSort;
    private java.awt.Button Start;
    private java.awt.Button button2;
    public static java.awt.Canvas canvas1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
